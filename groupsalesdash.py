# -*- coding: utf-8 -*-
"""GroupSalesDash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I2G_yg98NEYHSxSBktFfqnF5LS-CvyFo
"""

import streamlit as st
import pandas as pd
import altair as alt

st.set_page_config(page_title="Group Sales Dashboard")
st.sidebar.title("Group Sales Dashboard")

@st.cache(allow_output_mutation=True)
def load_data(file_path):
    try:
        # Read CSV with Latin-1 encoding
        df = pd.read_csv(file_path, encoding='latin1')
    except UnicodeDecodeError as e:
        st.error(f"Error reading the file: {e}")
        return None
    
    if 'add_datetime' in df.columns:
        df['add_datetime'] = pd.to_datetime(df['add_datetime'])
    
    return df

# Specify your CSV file path
data_file = 'group_sales.csv'

# Load data and convert to UTF-8
data = load_data(data_file)

if data is None:
    st.error("Failed to load data. Please check the file and try again.")
else:
    st.write("Data has been successfully loaded.")

    try:
        data.to_csv('group_sales_utf8.csv', index=False, encoding='utf-8')
    except Exception as e:
        st.error(f"Error saving data: {e}")

# Define mapping for event_name
event_name_mapping = {
    'E240509': '5/9 v.s. Liberty',
    'E240514L': '5/14 v.s. Fever',
    'E240517': '5/17 v.s. Mystic',
    'E240523': '5/23 v.s. Lynx',
    'E240528L': '5/28 v.s. Mercury',
    'E240531L': '5/31 v.s. Wings',
    'E240604L': '6/4 v.s. Mystics',
    'E240608L': '6/8 v.s. Liberty',
    'E240610L': '6/10 v.s. Fever',
    'E240618': '6/18 v.s. Sparks',
    'E240628': '6/28 v.s. Dream',
    'E240707': '7/7 v.s. Dream',
    'E240710': '7/10 v.s. Liberty',
    'E240714': '7/14 v.s. Mercury',
    'E240823L': '8/23 v.s. Sky',
    'E240901L': '9/1 v.s. Storm',
    'E240903': '9/3 v.s. Storm',
    'E240906L': '9/6 v.s. Aces',
    'E240917L': '9/17 v.s. Lynx',
    'E240919L': '9/19 v.s. Sky'
}

# Replace event_name with mapped values
data['event_name_display'] = data['event_name'].map(event_name_mapping).fillna(data['event_name'])

# Page selection
page = st.sidebar.selectbox('Select Page', ['Sales by Game', 'Sales Rep Performance', 'Cumulative Stats for Games', 'Cumulative Stats for Reps'])

if page == 'Sales by Game':
    # Sidebar for event selection
    event_name = st.sidebar.selectbox('Select Event', sorted(data['event_name_display'].unique()))

    # Filter data based on selected event
    filtered_data = data[data['event_name_display'] == event_name]

    # Prepare data for time-series plots
    # Total sales over time
    time_series_sales = filtered_data.groupby(filtered_data['add_datetime'].dt.date)['block_full_price'].sum().reset_index()
    time_series_sales.columns = ['Date', 'Total Sales']  

    # Total orders per day by account
    time_series_orders = filtered_data.groupby(filtered_data['add_datetime'].dt.date)['acct_id'].nunique().reset_index(name='total_orders')
    time_series_orders.columns = ['Date', 'Total Orders']  

    # Total tickets sold per day
    time_series_tickets = filtered_data.groupby(filtered_data['add_datetime'].dt.date)['num_seats'].sum().reset_index()
    time_series_tickets.columns = ['Date', 'Total Tickets Sold']  

    # Time-series line chart using Altair for total sales
    chart_sales = alt.Chart(time_series_sales).mark_line().encode(
        x='Date:T',  # Rename x-axis
        y=alt.Y('Total Sales:Q', axis=alt.Axis(title='Total Sales')), 
        tooltip=['Date:T', 'Total Sales:Q']
    ).properties(
        title=f'Total Sales Over Time for Event: {event_name}',
        width=800,
        height=300
    )

    # Time-series line chart using Altair for total orders
    chart_orders = alt.Chart(time_series_orders).mark_line(color='orange').encode(
        x='Date:T',  # Rename x-axis
        y=alt.Y('Total Orders:Q', axis=alt.Axis(title='Total Orders')),  
        tooltip=['Date:T', 'Total Orders:Q']
    ).properties(
        title=f'Total Orders Over Time for Event: {event_name}',
        width=800,
        height=300
    )

    # Time-series line chart using Altair for total tickets sold
    chart_tickets = alt.Chart(time_series_tickets).mark_line(color='green').encode(
        x='Date:T',  # Rename x-axis
        y=alt.Y('Total Tickets Sold:Q', axis=alt.Axis(title='Total Tickets Sold')),  
        tooltip=['Date:T', 'Total Tickets Sold:Q']
    ).properties(
        title=f'Total Tickets Sold Over Time for Event: {event_name}',
        width=800,
        height=300
    )

    # Display the charts with appropriate labels
    st.altair_chart(chart_sales, use_container_width=True)
    if not time_series_sales.empty:
        total_sales = time_series_sales['Total Sales'].sum()
        st.info(f"{event_name} has reached ${total_sales:.2f} in total group sales over all time.")
        
    st.altair_chart(chart_orders, use_container_width=True)
    if not time_series_orders.empty:
        total_orders = time_series_orders['Total Orders'].sum()
        st.info(f"{event_name} has accumulated {total_orders} total group orders over all time.")
        
    st.altair_chart(chart_tickets, use_container_width=True)
    if not time_series_tickets.empty:
        total_tickets = time_series_tickets['Total Tickets Sold'].sum()
        st.info(f"{event_name} has sold {total_tickets} total group tickets over all time.")

elif page == 'Sales Rep Performance':
    # Filter representatives with at least 30 orders
    reps_with_enough_orders = data.groupby('acct_rep_full_name')['acct_id'].nunique()[data.groupby('acct_rep_full_name')['acct_id'].nunique() >= 30].index.tolist()

    # Sidebar for sales rep selection
    sales_rep = st.sidebar.selectbox('Select Sales Representative', sorted(reps_with_enough_orders))

    # Filter data based on selected sales rep
    filtered_rep_data = data[data['acct_rep_full_name'] == sales_rep]

    if filtered_rep_data.empty:
        st.warning(f"No data available for {sales_rep}. Please select another sales representative.")
    else:
        # Prepare data for sales rep performance charts
        # Total sales over time
        rep_time_series_sales = filtered_rep_data.groupby(filtered_rep_data['add_datetime'].dt.date)['block_full_price'].sum().reset_index()
        rep_time_series_sales.columns = ['Date', 'Total Sales']  

        # Total orders per day by account
        rep_time_series_orders = filtered_rep_data.groupby(filtered_rep_data['add_datetime'].dt.date)['acct_id'].nunique().reset_index(name='total_orders')
        rep_time_series_orders.columns = ['Date', 'Total Orders']  

        # Total tickets sold per day
        rep_time_series_tickets = filtered_rep_data.groupby(filtered_rep_data['add_datetime'].dt.date)['num_seats'].sum().reset_index()
        rep_time_series_tickets.columns = ['Date', 'Total Tickets Sold']  

        # Time-series line chart using Altair for sales rep total sales
        rep_chart_sales = alt.Chart(rep_time_series_sales).mark_line().encode(
            x='Date:T',  # Rename x-axis
            y=alt.Y('Total Sales:Q', axis=alt.Axis(title='Total Sales')),  
            tooltip=['Date:T', 'Total Sales:Q']
        ).properties(
            title=f'Total Sales Over Time for {sales_rep}',
            width=800,
            height=300
        )

        # Time-series line chart using Altair for sales rep total orders
        rep_chart_orders = alt.Chart(rep_time_series_orders).mark_line(color='orange').encode(
            x='Date:T',  # Rename x-axis
            y=alt.Y('Total Orders:Q', axis=alt.Axis(title='Total Orders')),  
            tooltip=['Date:T', 'Total Orders:Q']
        ).properties(
            title=f'Total Orders Over Time for {sales_rep}',
            width=800,
            height=300
        )

        # Time-series line chart using Altair for sales rep total tickets sold
        rep_chart_tickets = alt.Chart(rep_time_series_tickets).mark_line(color='green').encode(
            x='Date:T',  # Rename x-axis
            y=alt.Y('Total Tickets Sold:Q', axis=alt.Axis(title='Total Tickets Sold')),  
            tooltip=['Date:T', 'Total Tickets Sold:Q']
        ).properties(
            title=f'Total Tickets Sold Over Time for {sales_rep}',
            width=800,
            height=300
        )

        # Display the charts with appropriate labels
        st.altair_chart(rep_chart_sales, use_container_width=True)
        if not rep_time_series_sales.empty:
            total_rep_sales = rep_time_series_sales['Total Sales'].sum()
            st.info(f"{sales_rep} has achieved ${total_rep_sales:.2f} in total sales over all time.")
            
        st.altair_chart(rep_chart_orders, use_container_width=True)
        if not rep_time_series_orders.empty:
            total_rep_orders = rep_time_series_orders['Total Orders'].sum()
            st.info(f"{sales_rep} has completed {total_rep_orders} total orders over all time.")
            
        st.altair_chart(rep_chart_tickets, use_container_width=True)
        if not rep_time_series_tickets.empty:
            total_rep_tickets = rep_time_series_tickets['Total Tickets Sold'].sum()
            st.info(f"{sales_rep} has sold {total_rep_tickets} total tickets over all time.")

elif page == 'Cumulative Stats for Games':
    # Calculate cumulative stats for games
    games_cumulative_sales = data.groupby('event_name_display')['block_full_price'].sum().reset_index()
    games_cumulative_sales.columns = ['Event', 'Total Sales']  

    games_cumulative_orders = data.groupby('event_name_display')['acct_id'].nunique().reset_index()
    games_cumulative_orders.columns = ['Event', 'Total Orders']  

    games_cumulative_tickets = data.groupby('event_name_display')['num_seats'].sum().reset_index()
    games_cumulative_tickets.columns = ['Event', 'Total Tickets Sold']  

    # Bar chart for total sales by game
    chart_games_sales = alt.Chart(games_cumulative_sales).mark_bar().encode(
        x='Event:N',  # Categorical x-axis
        y=alt.Y('Total Sales:Q', axis=alt.Axis(title='Total Sales')), 
        tooltip=['Event:N', 'Total Sales:Q']
    ).properties(
        title='Total Sales by Game',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Bar chart for total orders by game
    chart_games_orders = alt.Chart(games_cumulative_orders).mark_bar(color='orange').encode(
        x='Event:N',  # Categorical x-axis
        y=alt.Y('Total Orders:Q', axis=alt.Axis(title='Total Orders')), 
        tooltip=['Event:N', 'Total Orders:Q']
    ).properties(
        title='Total Orders by Game',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Bar chart for total tickets sold by game
    chart_games_tickets = alt.Chart(games_cumulative_tickets).mark_bar(color='green').encode(
        x='Event:N',  # Categorical x-axis
        y=alt.Y('Total Tickets Sold:Q', axis=alt.Axis(title='Total Tickets Sold')), 
        tooltip=['Event:N', 'Total Tickets Sold:Q']
    ).properties(
        title='Total Tickets Sold by Game',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Display the charts with appropriate labels
    st.altair_chart(chart_games_sales, use_container_width=True)
    st.altair_chart(chart_games_orders, use_container_width=True)
    st.altair_chart(chart_games_tickets, use_container_width=True)

elif page == 'Cumulative Stats for Reps':
    # Calculate cumulative stats for sales reps
    reps_cumulative_sales = data.groupby('acct_rep_full_name')['block_full_price'].sum().reset_index()
    reps_cumulative_sales.columns = ['Sales Rep', 'Total Sales']  

    reps_cumulative_orders = data.groupby('acct_rep_full_name')['acct_id'].nunique().reset_index()
    reps_cumulative_orders.columns = ['Sales Rep', 'Total Orders']  

    reps_cumulative_tickets = data.groupby('acct_rep_full_name')['num_seats'].sum().reset_index()
    reps_cumulative_tickets.columns = ['Sales Rep', 'Total Tickets Sold']  

    # Bar chart for total sales by sales rep
    chart_reps_sales = alt.Chart(reps_cumulative_sales).mark_bar().encode(
        x='Sales Rep:N',  # Categorical x-axis
        y=alt.Y('Total Sales:Q', axis=alt.Axis(title='Total Sales')), 
        tooltip=['Sales Rep:N', 'Total Sales:Q']
    ).properties(
        title='Total Sales by Sales Rep',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Bar chart for total orders by sales rep
    chart_reps_orders = alt.Chart(reps_cumulative_orders).mark_bar(color='orange').encode(
        x='Sales Rep:N',  # Categorical x-axis
        y=alt.Y('Total Orders:Q', axis=alt.Axis(title='Total Orders')), 
        tooltip=['Sales Rep:N', 'Total Orders:Q']
    ).properties(
        title='Total Orders by Sales Rep',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Bar chart for total tickets sold by sales rep
    chart_reps_tickets = alt.Chart(reps_cumulative_tickets).mark_bar(color='green').encode(
        x='Sales Rep:N',  # Categorical x-axis
        y=alt.Y('Total Tickets Sold:Q', axis=alt.Axis(title='Total Tickets Sold')), 
        tooltip=['Sales Rep:N', 'Total Tickets Sold:Q']
    ).properties(
        title='Total Tickets Sold by Sales Rep',
        width=800,
        height=400
    ).configure_axisX(
        labelAngle=-45
    )

    # Display the charts with appropriate labels
    st.altair_chart(chart_reps_sales, use_container_width=True)
    st.altair_chart(chart_reps_orders, use_container_width=True)
    st.altair_chart(chart_reps_tickets, use_container_width=True)
